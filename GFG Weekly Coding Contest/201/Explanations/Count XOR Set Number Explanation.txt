We will use digit dynamic programming to find the number of good integers smaller than N. 

How will we do it ? 

Every integer < N will have the following properties - 

1. It will have some prefix = N (possibly 0 length prefix)
2. It will have a 0 where N has a 1. 
3. It can have any bits in the suffix. 

Iterate over all the set bits of N, and then calculate the number of good integers
with that prefix. 

If N = 10010100101

then, we will check the following prefixes - 

1. 0 xxxxxxxx
2. 100 0 xxxxxxx
3. 10010 0 xxxxxx 
4. 10010100 0 xx 
5. 1001010010 0

-----

Now, given a prefix, how to count the number of good integers with that prefix ? 

A good integer has an odd number of bits set (to have XOR = 1) 

Suppose we have fixed a prefix of length L and there are S bits remaining in the suffix. 

There are 2^S ways of filling the suffix. 
Exactly half of them will have an even number of bits set and half will have an odd number of bits set. 

If the prefix has an odd number of bits set, then we will set an even number of bits in the suffix. 
If the prefix has an even number of bits set, then we will set an odd number of bits in the suffix. 

Either way this is equal to 2^{S - 1}

-----

There is one corner case - when we are at the very last bit. 

There is no suffix in that case. 
We will add 1 to the answer only if the prefix has an odd number of bits set. 

-----

class Solution {
  public:
    int is_bit_set(long long n, int bit)
    {
        return ( (n&(1LL << bit)) != 0 );
    }
    
    long long count(long long n)
    {
        int bit_count = 0;
        long long total = 0;
        const int MAX_BIT = 63, MOD = 1e9 + 7;
        for(int bit = MAX_BIT; bit > 0; bit--)
        {
            if(is_bit_set(n, bit))
            {
                int remaining_bits = bit;
            
                total += (1LL << (remaining_bits - 1));
                total %= MOD;
                
                bit_count++;
            }
        }
        
        if(bit_count%2 == 1 && n%2 == 1)
        {
            total++;
        }
        
        return total;
    }
    
    int countNumbers(long long l, long long r) 
    {
        const int MOD = 1e9 + 7;
        return (count(r + 1) - count(l) + MOD)%MOD;
        
    }
};