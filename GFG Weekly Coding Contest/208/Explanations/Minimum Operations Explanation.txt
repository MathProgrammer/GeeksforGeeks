Notice that A[i] (mod k) remains invariant. 

The final objective is that we need every element to occur an even number of times, except one (at most). 

Now, let us solve for each modular class of k independently. 
At most one modular class can have an odd frequency. 

-----

Now, we have an array - A[1], A[2] , ... A[n] (sorted)
and we can add k to them such that we need every element to occur an even number of times. 

If there are an even number of elements, then we can just make every pair equal 

A[i] -> A[i - 1] 

----

If there are an odd number of elements, then we have to iterate over the best choice of middle number. 

If A[i] is the middle number, then we have divided A into 2 even subarrays 

A[1, i - 1] and A[i + 1, n]

We follow the same greedy strategy above for the even subarrays. 

The answer for the middle element is the sum of operations for the prefix and suffix subarray. 


-----

class Solution {
  private: 
    int get_operations(vector <int> &A, int k)
    {
        sort(A.begin(), A.end());
        
        if(A.size()%2 == 1)
        {
            vector <int> prefix(A.size()); 
            for(int i = 1; i < A.size(); i++)
            {
                prefix[i] = (A[i] - A[i - 1])/k + (i == 1 ? 0 : prefix[i - 2]);
            }
            
            vector <int> suffix(A.size());
            for(int i = A.size() - 2; i >= 0; i--)
            {
                suffix[i] = (A[i + 1] - A[i])/k + (i + 2 == A.size() ? 0 : suffix[i + 2]);
                //cout << "Suffix " << i << " = " << suffix[i] << "\n";
            }
            
            int answer = 1e9;
            for(int i = 0; i < A.size(); i += 2)
            {
                int answer_here = (i == 0 ? 0 : prefix[i - 1]) + 
                                (i + 1 == A.size() ? 0 : suffix[i + 1]);
                //cout << "i = " << i << " Ans = " << answer_here << "\n";
                answer = min(answer_here, answer);
            }
            
            return answer;
        }
        
        int operations = 0; 
        
        for(int i = 1; i < A.size(); i+=2)
        {
            operations += (A[i] - A[i - 1])/k;
        }
        
        return operations;
    }
    
  public:
    int minOperations(vector<int> &A, int k) 
    {
        map <int, int> frequency; 
        vector <vector <int> > elements(k);
        for(int i = 0; i < A.size(); i++)
        {
            int mod = A[i]%k;
            frequency[mod]++;
            elements[mod].push_back(A[i]);
        }
        
        int odd_frequency_moduli = 0;
        for(int i = 0; i < k; i++)
        {
            odd_frequency_moduli += (frequency[i]%2 == 1);
        }
        
        if(odd_frequency_moduli > 1)
        {
            return -1;
        }
        
        int operations = 0; 
        for(int i = 0; i < k; i++)
        {
            operations += get_operations(elements[i], k);
        }
        
        return operations;
    }
};